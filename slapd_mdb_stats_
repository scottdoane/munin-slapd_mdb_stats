#!/usr/bin/perl -w
# -*- perl -*-
#
# Plugin copyright The University of Texas at Austin 2015
# Authored by <sdoane@austin.utexas.edu>
# Based on work by Bjorn Ruberg <bjorn@ruberg.no> 2005-2009
#
# Licensed under GPLv2.
#
# Environment variables:
#
#   - dbstat   The full path to a db_stat binary able to
#              communicate with the LDAP backend LMDB
#              database files.
#   - dbdir    The full path to the directory where
#              the LDAP backend BDB database files are.
#   - dbobject The database object that requires a count.
#   - title    (Optional) The plugin's title. Useful if you
#              have more than one DIT installed.
#   - warning  (Optional) A threshold integer value. Triggers
#              plugin to send warnings if database percentage
#              drops below the given value.
#
# Limitations:
#
# - The plugin only checks _one_ database directory. To work
#   around that, i.e. if you have more than one DIT in your
#   OpenLDAP, create symlinked files and corresponding entries
#   in the Munin environment file(s). Note that this will
#   break autoconf, i.e. autoconf will probably still suggest
#   a default set of symlinks.
#
#   Sample config for multiple database directories:
#   [slapd_mdb_*]
#   user slapd
#   group slapd
#   env.dbstat /opt/bin/mdb_stat
#
#   [slapd_mdb_primary_*]
#   env.dbdir /var/ldap/mdb
#
#   [slapd_mdb_replication_*]
#   env.dbdir /var/ldap/syncrpl
#   env.dbobject entryCSN
#
# Magic markers
#%# family=auto
#%# capabilities=autoconf suggest

use strict;
use vars qw ( $measure $config $dbdir $dbstat $dbobject $warning);
my $arg = shift(@ARGV);

# Finding db_stat should be done here
$dbstat = ( $ENV{'dbstat'} || "/usr/bin/mdb_stat" );

# Also the LDAP database files
$dbdir = ( $ENV{'dbdir'} || "/var/lib/ldap" );

# Define for full object count, entryUUID should suffice
$dbobject = ( $ENV{'dbobject'} || "entryUUID" );

# And the graph title
my $title = ( $ENV{'title'} || '' );

# Die if no valid file ending, unless suggest/autoconf.
if ( $0 !~ /_(pages|percent|objects)$/ ) {
    unless ( $arg && $arg =~ /^(suggest|autoconf)$/ ) {
        die(
"Plugin must be suffixed with 'percent', 'pages', or 'objects'. Try running 'munin-node-configure suggest'"
        );
    }
}

# Check file name
if ( $0 =~ /_pages$/ ) {
    $measure = "pages";
}
elsif ( $0 =~ /_percent$/ ) {
    $measure = "percent";
}
elsif ( $0 =~ /_objects$/ ) {
    $measure = "objects";
}

# Parse command line arguments
if ( $arg && $arg eq "config" ) {
    $config = 1;
}
elsif ( $arg && $arg eq "autoconf" ) {
    if ( !-x $dbstat ) {
        print "no (Can't execute mdb_stat file '$dbstat')\n";
    }
    elsif ( -d $dbdir && -r $dbdir ) {
        print "no (Can't open database directory '$dbdir')";
    }
    else {
        print "yes\n";
    }
    exit 0;
}
elsif ( $arg && $arg eq "suggest" ) {
    print "objects\n";
    print "pages\n";
    print "percent\n";
    exit 0;
}

if ($config) {
    print <<EOF;
graph_category OpenLDAP
EOF
    if ( $measure eq "pages" ) {
        print <<EOF;
graph_title Page utilization of database $title
graph_info Count of database pages in use
graph_args --base 1000 -l 0
graph_vlabel Database pages in use
EOF
    }
    elsif ( $measure eq "percent" ) {
        print <<EOF;
graph_title Percent of database utilization $title
graph_info Percentage of available database space
graph_args --base 1000 --upper-limit 100 -l 0 --vertical-label %
graph_vlabel Database size (percentage)
EOF

    }
    elsif ( $measure eq "objects" ) {
        print <<EOF;
graph_title $dbobject objects in database $title
graph_info Count of $dbobject in database
graph_args --base 1000 -l 0
graph_vlabel Object count (total)
EOF
    }
}

my @output   = `$dbstat $dbdir -e -s $dbobject`;
my @arr      = [];
my $database = "";                                 # "Total";
my $file     = "";                                 # "Total";
my $max      = undef;
my $pages    = undef;
my $percent  = undef;
my $objects  = undef;

foreach my $line (@output) {
    chomp $line;
    if ( $line =~ /^  Max pages\: (.*)$/ )            { $max     = $1; }
    if ( $line =~ /^  Number of pages used\: (.*)$/ ) { $pages   = $1; }
    if ( $line =~ /^  Entries\: (.*)$/ )              { $objects = $1; }
}

if ( defined($max) && defined($pages) && defined($objects) ) {

    # split down to the actual name of the defined database given the path
    @arr = split( "\/", $dbdir );
    $database = $arr[-1];


    my $val = "slapd_mdb_${measure}_${database}";
    if ($config) {
        if ( $measure eq "pages" ) {
            print "$val.label $database\n";
            print "$val.type GAUGE\n";
            print "$val.line $max:FF0000:Max\n";
            print "$val.info Number of pages used in $database\n";
        }
        elsif ( $measure eq "percent" ) {
            print "$val.label $database\n";
            print "$val.type GAUGE\n";
            print "$val.info Percentage of pages used in $database\n";
            print "$val.warning $warning:\n" if $ENV{'warning'};
        }
        elsif ( $measure eq "objects" ) {
            print "$val.label $dbobject\n";
            print "$val.type GAUGE\n";
            print "$val.info Number of $dbobject objects found in $database\n";
        }
    }
    else {
        if ( $measure eq "pages" ) {
            print "$val.value $pages\n";
        }
        elsif ( $measure eq "percent" ) {
            # Find the percentage of pages used
            $percent = $pages / $max;
            print "$val.value $percent\n";
        }
        elsif ( $measure eq "objects" ) {
            print "$val.value $objects\n";
        }
    }
    my @arr      = [];
    my $database = "";      # "Total";
    my $file     = "";      # "Total";
    my $max      = undef;
    my $pages    = undef;
    my $percent  = undef;
    my $objects  = undef;
}
